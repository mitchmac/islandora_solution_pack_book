<?php

/**
 * @file
 *
 * Defines all the hooks this module implements.
 *
 * @todo Since we don't have the tabs module, we need to create paths for Books.
 */

// Permissions
define('PERM_ISLANDORA_BOOK_DELETE_PAGES', 'delete pages');
define('PERM_ISLANDORA_BOOK_MANAGE_BOOK', 'manage book object');
define('PERM_ISLANDORA_BOOK_MANAGE_PAGE', 'manage page object');
define('PERM_ISLANDORA_BOOK_MANAGE_DELETED_BOOKS', 'manage deleted books');

/**
 * Implements hook_menu().
 */
function islandora_book_menu() {
  return array(
    'admin/islandora/book' => array(
      'title' => 'Book Collection',
      'description' => 'Configuration the Book solution pack.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_book_admin_settings_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'islandora/object/%islandora_object/pages' => array(
      'title' => 'Pages',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_book_pages_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_book_pages_access_callback',
      'access arguments' => array(2),
      'file' => 'includes/pages.menu.inc',
    ),
    'islandora/object/%islandora_object/manage/book' => array(
      'title' => 'Book',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_book_manage_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_book_manage_access_callback',
      'access arguments' => array(2),
      'file' => 'includes/manage_book.menu.inc',
    ),
    'islandora/object/%islandora_object/manage/page' => array(
      'title' => 'Page',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_book_page_manage_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_book_page_manage_access_callback',
      'access arguments' => array(2),
      'file' => 'includes/manage_page.menu.inc',
    ),
    'islandora/object/%islandora_object/manage/book/ingest' => array(
      'title' => 'Create, append, or insert pages',
      'page callback' => 'islandora_book_ingest_pages',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(FEDORA_INGEST, 2),
      'file' => 'includes/ingest_pages.form.inc',
    )
  );
    /*
    'restore/books' => array(
      'title' => t('Deleted Books'),
      'file' => 'management/book_undelete.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('book_undelete_form'),
      'access arguments' => array(PERM_ISLANDORA_BOOK_MANAGE_DELETED_BOOKS),
      'type' => MENU_NORMAL_ITEM,
    ),
    'islandora/book/updatepage' => array(
      'page callback' => 'page_management_wrapper',
      'access arguments' => array(PERM_ISLANDORA_BOOK_MANAGE_BOOK),
      'file' => 'ObjectManager.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/book/upload' => array(
      'page callback' => 'upload_pages',
      'access arguments' => array(PERM_ISLANDORA_BOOK_MANAGE_BOOK),
      'file' => 'pageload/upload_frame.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/book/borndigital' => array(
      'page callback' => 'create_borndigital',
      'access arguments' => array(FEDORA_VIEW),
      'file' => 'management/born_digital.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/book/upload_setup' => array(
      'page callback' => 'upload_setup',
      'access arguments' => array(PERM_ISLANDORA_BOOK_MANAGE_BOOK),
      'file' => 'pageload/upload_frame.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/book/process_file' => array(
      'page callback' => 'process_file',
      'access arguments' => array(FEDORA_VIEW),
      'file' => 'pageload/upload_frame.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/book/process_page_directory' => array(
      'page callback' => 'prep_add_form',
      'access arguments' => array(FEDORA_VIEW),
      'file' => 'pageload/prepare_add_pages_form.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/book/delete_book_files' => array(
      'page callback' => 'delete_book_page_files',
      'access arguments' => array(FEDORA_VIEW),
      'file' => 'pageload/upload_frame.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/page/manage' => array(
      'page callback' => 'islandora_book_page_management',
      'access arguments' => array(PERM_ISLANDORA_BOOK_MANAGE_PAGE),
      'file' => 'page_object_manager.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/book/manage' => array(
      'page callback' => 'islandora_book_display_links',
      'access arguments' => array(PERM_ISLANDORA_BOOK_MANAGE_BOOK),
      'file' => 'management/IslandoraBookDisplayLinks.inc',
      'type' => MENU_CALLBACK,
    ),
    'islandora/book/management' => array(
      'page callback' => 'book_management_wrapper',
      'access arguments' => array(PERM_ISLANDORA_BOOK_MANAGE_BOOK),
      'file' => 'book_object_manager.inc',
      'type' => MENU_CALLBACK,
      )
  );
*/
}

/**
 * Implements hook_perm().
 */
function islandora_book_perm() {
  return array(
    PERM_ISLANDORA_BOOK_DELETE_PAGES,
    PERM_ISLANDORA_BOOK_MANAGE_BOOK,
    PERM_ISLANDORA_BOOK_MANAGE_PAGE,
    PERM_ISLANDORA_BOOK_MANAGE_DELETED_BOOKS
  );
}

/**
 * Determine whether or not to show this modules pages tab.
 *
 * @param FedoraObject $fedora_object
 *   The book object.
 *
 * @return boolean
 *   TRUE if it should be shown, and FALSE if it should not be shown.
 */
function islandora_book_pages_access_callback($object = NULL) {
  if (!isset($object)) {
    return FALSE;
  }
  $is_book = in_array('islandora:bookCModel', $object->models);
  return $is_book && islandora_object_access_callback(FEDORA_VIEW, $object);
}

/**
 * Determine whether or not to show this modules manage tab.
 *
 * @param FedoraObject $fedora_object
 *   The object being managed.
 *
 * @return boolean
 *   TRUE if it should be shown, and FALSE if it should not be shown.
 */
function islandora_book_manage_access_callback($object = NULL) {
  if (!isset($object)) {
    return FALSE;
  }
  $manage_actions = array(
    PERM_ISLANDORA_BOOK_DELETE_PAGES,
    PERM_ISLANDORA_BOOK_MANAGE_BOOK,
    PERM_ISLANDORA_BOOK_MANAGE_PAGE,
    PERM_ISLANDORA_BOOK_MANAGE_DELETED_BOOKS
  );
  $manage_actions_access = array_map('user_access', $manage_actions);
  $can_perform_a_action = array_sum($manage_actions_access) > 0;
  $is_book = in_array('islandora:bookCModel', $object->models);
  return $is_book && $can_perform_a_action && islandora_object_access_callback(FEDORA_MANAGE, $object);
}

/**
 * Determine whether or not to show this modules manage tab.
 *
 * @param FedoraObject $fedora_object
 *   The object being managed.
 *
 * @return boolean
 *   TRUE if it should be shown, and FALSE if it should not be shown.
 */
function islandora_book_page_manage_access_callback($object = NULL) {
  if (!isset($object)) {
    return FALSE;
  }
  $manage_actions = array(
    PERM_ISLANDORA_BOOK_MANAGE_PAGE,
  );
  $manage_actions_access = array_map('user_access', $manage_actions);
  $can_perform_a_action = array_sum($manage_actions_access) > 0;
  $is_page = in_array('islandora:pageCModel', $object->models);
  return $is_page && $can_perform_a_action && islandora_object_access_callback(FEDORA_MANAGE, $object);
}

/**
 * Implementation of hook_theme().
 */
function islandora_book_theme() {
  return array(
    'islandora_book_book' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/islandora_book.theme.inc',
      'template' => 'theme/islandora-book'
    ),
    'islandora_book_page' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/islandora_book.theme.inc',
      'template' => 'theme/islandora-page'
    ),
    'islandora_book_pages' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/islandora_book.theme.inc',
      'template' => 'theme/islandora-pages'
    ),
    'islandora_book_pages_grid' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/islandora_book.theme.inc',
      'template' => 'theme/islandora-pages-grid'
    ),
    'islandora_book_pages_list' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/islandora_book.theme.inc',
      'template' => 'theme/islandora-pages-list'
    ),
    'islandora_book_reorder_pages_form' => array(
      'render element' => 'form',
      'file' => 'includes/reorder_pages.form.inc',
    ),
    /*
      'islandora_book_page_table' => array(
      'arguments' => array('element' => NULL),
      'file' => 'management/IslandoraBookPageTable.inc',
    ),
    'islandora_book_page_reorder_table' => array(
      'arguments' => array('element' => NULL),
      'file' => 'management/IslandoraPageReorderTable.inc',
    ),
    'islandora_book_undelete_table' => array(
      'arguments' => array('element' => NULL),
      'file' => 'management/IslandoraBookUndelete.inc',
    ),
    'islandora_file_reorder_table' => array(
      'arguments' => array('element' => NULL),
      'file' => 'management/IslandoraFileReorderTable.inc',
      )*/
  );
}

/**
 * Implements hook_help().
 */
function islandora_book_help($path, $arg) {
  switch ($path) {
    case 'admin/help#islandora_book':
      return t('<p>The Islandora Book Module allows users to create digital
                representations of books within the Fedora Repository. A book
                object is created using !mods data. A collection of associated
                page objects may then be created created. Page objects are
                created by ingesting a zipped folder of TIFF images, each
                representing a distinct page. Page TIFFs are used to create a
                series of Fedora datastreams on ingestion.  These streams
                include derivative images for display - JPEGS, Thumbnails, and
                JP2s, and one ore more OCR streams for text display and analysis
                </p>
                <h3>Configuration</h3>
                <p>The page datatreams may be created on this server, or on an
                external processing server with !microservices.<br/> To process
                images from TIFFS on this server check <strong>Create derivative
                images locally?</strong> on the admin page. (Link at the bottom
                of this page).<br/> TO create OCR streams on this server check
                <strong>Perform OCR on incoming TIFF images?</strong>.<br/><br/>
                </p>', array(
                  '!microservices' => l("Fedora Microservices", 'https://github.com/Islandora/fedora_microservices'),
                  '!mods' => l('MODS', 'http://www.loc.gov/standards/mods/'))
      );
  }
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function islandora_book_islandora_xml_form_builder_form_associations() {
  return array(
    'islandora_book_mods_form' => array(
      'content_model' => 'islandora:bookCModel',
      'form_name' => 'Islandora Book MODS Form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    )
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_book_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_book');
  return array(
    'Islandora Book MODS form' => array(
      'form_file' => "$module_path/data/forms/book_mods_form.xml",
    ),
  );
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_book_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_book');
  // Page Content Model
  $page_content_model = $connection->repository->constructObject('islandora:pageCModel');
  $page_content_model->owner = 'fedoraAdmin';
  $page_content_model->label = 'Islandora Page Content Model';
  $page_content_model->models = 'fedora-system:ContentModel-3.0';
  $page_content_model->relationships->add(FEDORA_MODEL_URI, 'hasService', 'islandora:viewerSdef');
  $page_content_model->relationships->add(FEDORA_MODEL_URI, 'hasService', 'islandora:jp2Sdef');
  $page_content_model->relationships->add(FEDORA_MODEL_URI, 'hasService', 'islandora:tei2htmlSdef');
  // DS-COMPOSITE-MODEL Datastream
  $datastream = $page_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_pageCModel_ds_composite_model.xml", FALSE);
  $page_content_model->ingestDatastream($datastream);
  // Internet Archive Book Content Model
  $ia_book_content_model = $connection->repository->constructObject('islandora:iabookCModel');
  $ia_book_content_model->owner = 'fedoraAdmin';
  $ia_book_content_model->label = 'Islandora Internet Archive Book Content Model';
  $ia_book_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream
  $datastream = $ia_book_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_iabookCModel_ds_composite_model.xml", FALSE);
  $ia_book_content_model->ingestDatastream($datastream);
  // Book Collection
  $book_collection = $connection->repository->constructObject('islandora:bookCollection');
  $book_collection->owner = 'fedoraAdmin';
  $book_collection->label = 'Book Collection';
  $book_collection->models = 'islandora:collectionCModel';
  $book_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream
  $datastream = $book_collection->constructDatastream('COLLECTION_POLICY', 'M');
  $datastream->label = 'COLLECTION_POLICY';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_book_collection_policy.xml", FALSE);
  $book_collection->ingestDatastream($datastream);
  // TN Datastream
  $datastream = $book_collection->constructDatastream('TN', 'M');
  $datastream->label = 'TN';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $book_collection->ingestDatastream($datastream);
  return array(
    'islandora_book'=> array(
      'title' => 'Islandora book',
      'objects' => array(
        $page_content_model,
        $ia_book_content_model,
        $book_collection
      )
    )
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_book_islandora_iabookcmodel_islandora_view_object($object) {
  $output = theme('islandora_book_book', array('object' => $object));
  return array('islandora_book' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_book_islandora_pagecmodel_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_book_page', array('object' => $object));
  return array('islandora_book' => $output);
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_book_islandora_pagecmodel_islandora_ingest_steps() {
  return array(
    'islandora_book_upload_pages' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_book_upload_pages_form',
      'module' => 'islandora_book',
      'file' => 'includes/upload_pages.form.inc'
    )
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_ingest_post_ingest().
 */
function islandora_book_islandora_pagecmodel_islandora_ingest_post_ingest(FedoraObject $object) {
  module_load_include('inc', 'islandora_book', 'includes/page.proccess');
  islandora_book_page_create_all_derivatives($object);
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_book_form_islandora_object_properties_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:bookCModel', $object->models)) {
    $form['delete']['#value'] = t('Delete Book');
  }
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_book_form_islandora_delete_object_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:bookCModel', $object->models)) {
    $form['description']['#markup'] = t('This will remove the book object and all related page objects. This action cannot be undone.');
    $form['#submit'] = array('islandora_book_islandora_delete_object_form_delete_pages_submit');
  }
}

/**
 * Submit handler responsible from deleting the all the page objects related to
 * the book object being deleted.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_book_islandora_delete_object_form_delete_pages_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_book', 'includes/delete_pages.batch');
  module_load_include('inc', 'islandora_book', 'includes/utilities');
  $object = $form_state['object'];
  $pages = array_map(function($o) { return $o['pid']; }, islandora_book_get_pages($object));
  batch_set(islandora_book_delete_pages_batch($object, $pages));
  // Called from within this submit handler rather than from the Drupal Form API
  // as we need the object to exist to generate the pages and if we run this
  // batch operation from a submit handler any submit handlers to be called
  // afterwards will not get called, which is a bug/feature of the Form API.
  islandora_delete_object_form_submit($form, $form_state);
}
